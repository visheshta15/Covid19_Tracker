{"version":3,"sources":["Home.js","InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","Covid.js","App.js","reportWebVitals.js","index.js"],"names":["Home","className","to","style","textDecoration","color","InfoBox","active","title","isBlue","isGreen","isRed","casesType","cases","total","props","Card","onClick","CardContent","Typography","casesTypeColors","hex","multiplier","recovered","deaths","prettyPrintStat","stat","numeral","format","showDataOnMap","data","map","country","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","backgroundImage","flag","Map","countries","zoom","ChangeMap","useMap","setView","console","log","TileLayer","attribution","url","Table","sort","a","b","src","alt","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","useState","datas","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","Covid","setCountries","countrytop","setCountrytop","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","e","countryCode","target","paddingLeft","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6ZA8BeA,MAxBf,WAEI,OACI,qBAAKC,UAAU,cAAf,SACI,sBAAKA,UAAU,OAAf,UAEI,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBACf,qBAAKA,UAAU,iBAEf,qBAAKA,UAAU,eAAf,SACI,cAAC,IAAD,CAAMC,GAAG,aAAcC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,WAA/D,SACI,oBAAIJ,UAAU,aAAd,kDAIR,oBAAIA,UAAU,iBAAd,+EACA,oBAAIA,UAAU,gBAAd,qC,6LCFDK,MAlBf,YAA8F,IAA5EC,EAA2E,EAA3EA,OAA2CC,GAAgC,EAAnEC,OAAmE,EAA3DC,QAA2D,EAAlDC,MAAkD,EAA3CC,UAA2C,EAAhCJ,OAAOK,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,MAAUC,EAAQ,iBAKzF,OACQ,cAACC,EAAA,EAAD,CAAMC,QAAUF,EAAME,QAAShB,UAAS,kBAAaM,GAAU,mBAA/D,SACI,eAACW,EAAA,EAAD,CAAajB,UAAU,gBAAvB,UACI,cAACkB,EAAA,EAAD,CAAYlB,UAAU,iBAAiBI,MAAM,gBAA7C,SAA8DG,IAE9D,oBAAIP,UAAU,iBAAd,yBAAyCY,KAEzC,eAACM,EAAA,EAAD,CAAYlB,UAAU,iBAAgBI,MAAM,gBAA5C,oBAAgES,EAAhE,uB,uECXdM,G,OAAkB,CACtBP,MAAO,CACLQ,IAAK,UACLC,WAAY,KAEdC,UAAW,CACTF,IAAK,UACLC,WAAY,MAEdE,OAAQ,CACNH,IAAK,UACLC,WAAY,OAMHG,EAAkB,SAACC,GAAD,OAC7BA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,MAGjCC,EAAgB,SAACC,GAAD,IAAOlB,EAAP,uDAAmB,QAAnB,OAE3BkB,EAAKC,KAAI,SAACC,GAAD,OACP,cAACC,EAAA,EAAD,CACEC,OAAQ,CAACF,EAAQG,YAAYC,IAAKJ,EAAQG,YAAYE,MAGtDC,YAAa,GACbC,YAAa,CACXlC,MAAOe,EAAgBR,GAAWS,IAClCmB,UAAWpB,EAAgBR,GAAWS,KAExCoB,OACGC,KAAKC,KAAKX,EAAQpB,IAAcQ,EAAgBR,GAAWU,WAAa,GAV7E,SAeE,cAACsB,EAAA,EAAD,UACE,sBAAK3C,UAAU,iBAAf,UACE,qBACEA,UAAU,YACVE,MAAO,CAAE0C,gBAAgB,QAAD,OAAUb,EAAQG,YAAYW,KAA9B,SAE1B,qBAAK7C,UAAU,YAAf,SAA4B+B,EAAQA,UACpC,sBAAK/B,UAAU,iBAAf,oBACU0B,IAAQK,EAAQnB,OAAOe,OAAO,UAExC,sBAAK3B,UAAU,iBAAf,wBACc0B,IAAQK,EAAQT,WAAWK,OAAO,UAEhD,sBAAK3B,UAAU,cAAf,qBACW0B,IAAQK,EAAQR,QAAQI,OAAO,qBC5BrCmB,MAzBf,YAAqD,IAAvCnC,EAAsC,EAAtCA,UAAWoC,EAA2B,EAA3BA,UAAYd,EAAe,EAAfA,OAAQe,EAAO,EAAPA,KAEzC,SAASC,EAAT,GAAsC,IAAjBhB,EAAgB,EAAhBA,OAAQe,EAAQ,EAARA,KAGzB,OAFYE,cACRC,QAAQlB,EAAQe,GACb,KAGX,OAPAI,QAAQC,IAAI1C,GAQR,qBAAKX,UAAU,MAAf,SAEI,eAAC,IAAD,WACI,cAACiD,EAAD,CAAWhB,OAAQA,EAAQe,KAAMA,IACjC,cAACM,EAAA,EAAD,CACIC,YAAY,yEACZC,IAAI,uDAIP5B,EAAcmB,EAAWpC,S,OCF3B8C,MAjBf,YAA6B,IAAbV,EAAY,EAAZA,UAEZ,OADAK,QAAQC,IAAIN,GAER,qBAAK/C,UAAU,QAAf,SACK+C,EACAW,MAAK,SAACC,EAAEC,GAAH,OAAQD,EAAE/C,MAAQgD,EAAEhD,OAAS,EAAI,KACtCkB,KAAI,SAACC,GAAD,OACD,+BACI,6BAAI,qBAAK8B,IAAK9B,EAAQG,YAAYW,KAAMiB,IAAK/B,EAAQG,YAAYW,SACjE,6BAAKd,EAAQA,UACb,6BAAI,iCAASL,IAAQK,EAAQnB,OAAOe,OAAO,oB,kBCTzDoC,EAAU,CACZC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRC,MAAO,CACL3B,OAAQ,IAGZ4B,qBAAqB,EACrBC,SAAU,CACRC,KAAM,QACNC,WAAW,EACXC,UAAW,CACTC,MAAO,SAAUC,EAAa7C,GAC5B,OAAOH,IAAQgD,EAAYC,OAAOhD,OAAO,WAI/CiD,OAAQ,CACNC,MAAO,CACL,CACEC,KAAM,OACNC,KAAM,CACJpD,OAAQ,WACRqD,cAAe,QAIrBC,MAAO,CACL,CACEC,UAAW,CACTjB,SAAS,GAEXkB,MAAO,CAELC,SAAU,SAAUT,EAAOU,EAAOC,GAChC,OAAO5D,IAAQiD,GAAOhD,OAAO,YAQnCR,EAAkB,CACtBP,MAAO,CACLQ,IAAK,UACLC,WAAY,IACZoD,MAAO,UAETnD,UAAW,CACTF,IAAK,UACLC,WAAY,KACZoD,MAAO,aAETlD,OAAQ,CACNH,IAAK,UACLC,WAAY,IACZoD,MAAO,WAgEEc,MA3Df,YAAyC,IAAD,IAApB5E,iBAAoB,MAAV,QAAU,EACpC,EAAyB6E,mBAAS,IAAlC,mBAAOC,EAAP,KAAcC,EAAd,KACMC,EAAiB,SAAC9D,GACpB,IACI+D,EADEC,EAAY,GAElB,IAAK,IAAIC,KAAQjE,EAAKlB,GAAW,CAC7B,GAAGiF,EAAe,CACd,IAAMG,EAAe,CACjBC,EAAGF,EACHG,EAAGpE,EAAKlB,GAAWmF,GAAQF,GAE/BC,EAAUK,KAAKH,GAEnBH,EAAgB/D,EAAKlB,GAAWmF,GAEpC,OAAOD,GAuBR,OAnBHM,qBAAU,YACS,uCAAG,sBAAAxC,EAAA,sEAERyC,MAAM,8DACXC,MAAK,SAACC,GAAD,OAAaA,EAASC,UAC3BF,MAAK,SAACxE,GACHuB,QAAQC,IAAIxB,GACZ,IAAMgE,EAAYF,EAAe9D,GACjCuB,QAAQC,IAAIwC,GACZH,EAAQG,MARE,2CAAH,qDAYfW,KACF,CAAC7F,IAEDyC,QAAQC,IAAIlC,EAAgBR,GAAWS,KAIrC,qBAAKpB,UAAU,YAAf,UACI,OAALyF,QAAK,IAALA,OAAA,EAAAA,EAAOgB,QAAS,GACf,cAAC,IAAD,CACE5E,KAAM,CACJ6E,SAAU,CACR,CACEC,gBAAiB,UACjBC,YAAazF,EAAgBR,GAAWS,IACxCS,KAAM4D,EACNhB,MAAOtD,EAAgBR,GAAW8D,SAIxCV,QAASA,O,OCwCJ8C,MAxJf,WAEI,MAAkCrB,mBAAS,IAA3C,mBAAOzC,EAAP,KAAkB+D,EAAlB,KACA,EAAoCtB,mBAAS,aAA7C,mBAAOuB,EAAP,KAAmBC,EAAnB,KACA,EAAsCxB,mBAAS,IAA/C,mBAAOtD,EAAP,KAAoB+E,EAApB,KACA,EAAkCzB,mBAAS,IAA3C,mBAAO0B,EAAP,KAAkBC,EAAlB,KACA,EAAkC3B,mBAAS,CAACrD,IAAK,UAAWiF,IAAK,YAAjE,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8B9B,mBAAS,GAAvC,mBAAO+B,EAAP,KAAgBC,EAAhB,KACA,EAAwChC,mBAAS,IAAjD,mBAAOiC,EAAP,KAAqBC,EAArB,KACA,EAAkClC,mBAAS,SAA3C,mBAAO7E,EAAP,KAAkBgH,EAAlB,KAEAxB,qBAAU,YAEgB,uCAAG,sBAAAxC,EAAA,sEACfyC,MAAM,4CACXC,MAAK,SAACC,GAAD,OAAYA,EAASC,UAC1BF,MAAK,SAACxE,GACH,IAAMkB,EAAYlB,EAAKC,KAAI,SAACC,GAAD,MACvB,CACI6F,KAAM7F,EAAQA,QACd4C,MAAO5C,EAAQG,YAAY2F,SAKnCf,EAAa/D,GACboE,EAAatF,GACb6F,EAAgB7F,MAdC,2CAAH,qDAkBtBiG,KACF,IAGF3B,qBAAU,WACDC,MAAM,sCACNC,MAAK,SAACC,GAAD,OAAYA,EAASC,UAC1BF,MAAK,SAACxE,GAAQoF,EAAepF,QACpC,IAKF,IAAMkG,EAAe,uCAAG,WAAOC,GAAP,iBAAArE,EAAA,6DACdsE,EAAcD,EAAEE,OAAOvD,MAE7BqC,EAAciB,GAERzE,EAAsB,cAAhByE,EACZ,qCADY,mDAEgCA,EAFhC,KALQ,SAYd7B,MAAM5C,GACX6C,MAAK,SAACC,GAAD,OAAaA,EAASC,UAC3BF,MAAK,SAACxE,GACHoF,EAAepF,GACfmF,EAAciB,GACd7E,QAAQC,IAAIxB,GACZyF,EAAa,CAACzF,EAAKK,YAAYC,IAAKN,EAAKK,YAAYE,OACrDoF,EAAW,MAnBK,2CAAH,sDAuBrB,OACI,sBAAKxH,UAAU,WAAf,UACI,sBAAKA,UAAU,YAAf,UAGI,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,eAAf,SACI,cAAC,IAAD,CAAMC,GAAG,IAAKC,MAAO,CAAEC,eAAgB,OAAQC,MAAO,WAAtD,SACI,oBAAKF,MAAO,CAAEiI,YAAa,IAA3B,kCAKR,cAACC,EAAA,EAAD,CAAapI,UAAU,gBAAvB,SAEI,eAACqI,EAAA,EAAD,CACIC,QAAQ,WACR3D,MAAOoC,EACPwB,SAAUR,EAHd,UAII,cAACS,EAAA,EAAD,CAAU7D,MAAM,YAAhB,uBAEI5B,EAAUjB,KAAI,SAACC,GAAD,OACV,cAACyG,EAAA,EAAD,CAAU7D,MAAO5C,EAAQ4C,MAAzB,SAAkC5C,EAAQ6F,kBAQ9D,sBAAK5H,UAAU,aAAf,UACI,cAAC,EAAD,CACIgB,QAAU,SAACgH,GAAD,OAAML,EAAa,UAC7BrH,OAAqB,UAAbK,EACRA,UAAWA,EACXJ,MAAM,2BACNK,MAAOY,EAAgBU,EAAYuG,YACnC5H,MAAOW,EAAgBU,EAAY5B,UAEvC,cAAC,EAAD,CACIU,QAAU,SAACgH,GAAD,OAAML,EAAa,cAC7BrH,OAAqB,cAAbK,EACRA,UAAWA,EACXJ,MAAM,YACNK,MAAOY,EAAgBU,EAAYwG,gBACnC7H,MAAOW,EAAgBU,EAAYZ,aAEvC,cAAC,EAAD,CACIN,QAAU,SAACgH,GAAD,OAAML,EAAa,WAC7BrH,OAAqB,WAAbK,EACRA,UAAWA,EACXJ,MAAM,SACNK,MAAOY,EAAgBU,EAAYyG,aACnC9H,MAAOW,EAAgBU,EAAYX,aAK3C,cAAC,EAAD,CACIvB,UAAU,WACVW,UAAWA,EACXoC,UAAa0E,EACbxF,OAAQoF,EACRrE,KAAMuE,OAId,cAACxG,EAAA,EAAD,CAAMf,UAAU,aAAhB,SACI,eAACiB,EAAA,EAAD,WACI,wDAEA,cAAC,EAAD,CAAO8B,UAAWmE,IAElB,qBAAIlH,UAAU,wBAAd,2BAAqDW,KAErD,cAAC,EAAD,CAAWA,UAAWA,aCrI3BiI,MAdf,WACE,OACE,qBAAK5I,UAAU,MAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAQ6I,KAAK,aAAb,SAA0B,cAAC,EAAD,MAC1B,cAAC,IAAD,CAAQA,KAAK,IAAb,SAAiB,cAAC,EAAD,cCCZC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB3C,MAAK,YAAkD,IAA/C4C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.533a2b7d.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport './Home.css';\r\nimport { MenuItem } from '@material-ui/core';\r\n\r\n\r\nfunction Home() {\r\n\r\n    return (\r\n        <div className=\"home__outer\">\r\n            <div className=\"home\">\r\n\r\n                <img className=\"home__image1\"/>\r\n                <img className=\"home__image2\"/>\r\n                <img className=\"home__image3\"/>\r\n                <img className=\"home__image4\"/>\r\n\r\n                <div className=\"home__center\">\r\n                    <Link to=\"/covidpage\"  style={{ textDecoration: 'none', color: '#3498db' }}>\r\n                        <h1 className=\"home__link\" >Check Covid-19 Situation Here...</h1>\r\n                    </Link>\r\n                </div>\r\n\r\n                <h4 className=\"home__dataInfo\">COVID-19 data sourced from Worldometers, updated every 10 minutes</h4>\r\n                <h4 className=\"home__creator\" >Made by Visheshta</h4>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\r\nimport './InfoBox.css';\r\nimport {Card, CardContent, Typography} from '@material-ui/core';\r\n\r\nfunction InfoBox({active, isBlue, isGreen, isRed, casesType, title, cases, total, ...props}) {\r\n\r\n    \r\n\r\n\r\n    return (\r\n            <Card onClick ={props.onClick} className={`infoBox ${active && 'infobox--active'}`}>\r\n                <CardContent className=\"infoBox__card\">\r\n                    <Typography className=\"infoBox__title\" color=\"textSecondary\">{title}</Typography>\r\n\r\n                    <h2 className='infoBox__cases'>{`Today ${cases}`}</h2>\r\n\r\n                    <Typography className=\"infoBox__total\"color=\"textSecondary\">{`${total} Total`} </Typography>\r\n                </CardContent>\r\n            </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport './util.css';\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: '#0984e3',\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\n\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  \r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      // color={casesTypeColors[casesType].hex}\r\n      // fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      pathOptions={{\r\n        color: casesTypeColors[casesType].hex,\r\n        fillColor: casesTypeColors[casesType].hex,\r\n      }}\r\n      radius={\r\n        (Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier)* 0.3\r\n        // Math.sqrt(country[casesType] / 10) *\r\n        // casesTypeColors[casesType].mulitiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url('${country.countryInfo.flag}')` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from 'react'\r\nimport './Map.css';\r\nimport { MapContainer as LeafletMap, TileLayer, useMap } from \"react-leaflet\";\r\nimport {showDataOnMap} from './util';\r\n\r\nfunction Map({casesType, countries,  center, zoom}) {\r\n    console.log(casesType)\r\n    function ChangeMap({ center, zoom }) {\r\n        const map = useMap();\r\n        map.setView(center, zoom);\r\n        return null;\r\n      }\r\n    \r\n    return (\r\n        <div className=\"map\">\r\n            {/* <LeafletMap center={center} zoom={zoom}> */}\r\n            <LeafletMap >\r\n                <ChangeMap center={center} zoom={zoom} />\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                {/* Loop through countries and draw circles on the screen */}\r\n\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport './Table.css';\r\nimport numeral from 'numeral';\r\n\r\n\r\nfunction Table({countries}) {\r\n    console.log(countries)\r\n    return (\r\n        <div className=\"table\">            \r\n            {countries\r\n            .sort((a,b)=> a.cases > b.cases ? -1 : 1)\r\n            .map((country)=>(\r\n                <tr>\r\n                    <td><img src={country.countryInfo.flag} alt={country.countryInfo.flag}/></td>\r\n                    <td>{country.country}</td>\r\n                    <td><strong>{numeral(country.cases).format(\"0,0\")}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","import React, {useState, useEffect} from 'react'\r\nimport './LineGraph.css';\r\nimport {Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\n\r\nconst options = {\r\n    legend: {\r\n      display: false,\r\n    },\r\n    elements: {\r\n      point: {\r\n        radius: 0,\r\n      },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n      mode: \"index\",\r\n      intersect: false,\r\n      callbacks: {\r\n        label: function (tooltipItem, data) {\r\n          return numeral(tooltipItem.value).format(\"+0,0\");\r\n        },\r\n      },\r\n    },\r\n    scales: {\r\n      xAxes: [\r\n        {\r\n          type: \"time\",\r\n          time: {\r\n            format: \"MM/DD/YY\",\r\n            tooltipFormat: \"ll\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [\r\n        {\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            // Include a dollar sign in the ticks\r\n            callback: function (value, index, values) {\r\n              return numeral(value).format(\"0a\");\r\n            },\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n\r\n  const casesTypeColors = {\r\n    cases: {\r\n      hex: '#0984e3',\r\n      multiplier: 800,\r\n      label: 'Active'\r\n    },\r\n    recovered: {\r\n      hex: \"#7dd71d\",\r\n      multiplier: 1200,\r\n      label: 'Recovered'\r\n    },\r\n    deaths: {\r\n      hex: \"#fb4443\",\r\n      multiplier: 2000,\r\n      label: 'Deaths'\r\n    },\r\n  };\r\n  \r\n\r\nfunction LineGraph({casesType='cases'}) {\r\n    const [datas, setData] = useState({});\r\n    const buildChartData = (data) =>{\r\n        const chartData = []\r\n        let lastDataPoint;\r\n        for( let date in data[casesType]){\r\n            if(lastDataPoint) {\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint\r\n                }\r\n                chartData.push(newDataPoint)\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n    }\r\n\r\n\r\n    useEffect(()=>{\r\n        const fetchData = async () =>{\r\n\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n            .then((response)=> response.json())\r\n            .then((data)=>{\r\n                console.log(data)\r\n                const chartData = buildChartData(data);\r\n                console.log(chartData)\r\n                setData(chartData)\r\n        })\r\n        }\r\n        \r\n        fetchData();\r\n    },[casesType]);\r\n\r\n      console.log(casesTypeColors[casesType].hex)\r\n\r\n\r\n       return (\r\n        <div className=\"lineGraph\">\r\n      {datas?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"#c8d6e5\",\r\n                borderColor: casesTypeColors[casesType].hex,\r\n                data: datas,\r\n                label: casesTypeColors[casesType].label,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import React,{useState, useEffect} from 'react';\r\nimport './Covid.css';\r\nimport {Link} from 'react-router-dom';\r\nimport {FormControl, Select, MenuItem , Card,CardContent} from '@material-ui/core';\r\nimport InfoBox from './InfoBox';\r\nimport Map from './Map';\r\nimport Table from './Table';\r\nimport LineGraph from './LineGraph';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport {prettyPrintStat} from './util';\r\nfunction Covid() {\r\n\r\n    const [countries, setCountries] = useState([]);\r\n    const [countrytop, setCountrytop] = useState('worldwide');\r\n    const [countryInfo, setCountryInfo] = useState({});\r\n    const [tableData, setTableData] = useState([]);\r\n    const [mapCenter, setMapCenter] = useState({lat: 26.846708, lng: 80.946159 });\r\n    const [mapZoom, setMapZoom] = useState(3);\r\n    const [mapCountries, setMapCountries] = useState([]);\r\n    const [casesType, setCasesType] = useState('cases')\r\n\r\n    useEffect(()=>{\r\n        //use async function ->  because to send a request to a server , and wait for it and do something with info\r\n        const getCountriesData = async() =>{\r\n            await fetch('https://disease.sh/v3/covid-19/countries') \r\n            .then((response)=>response.json()) //.then--> when it comes back with the response, then take only the json data\r\n            .then((data)=>{\r\n                const countries = data.map((country)=>(\r\n                    {\r\n                        name: country.country,\r\n                        value: country.countryInfo.iso2,\r\n                    }\r\n                ))\r\n\r\n                // const sortedData = sortData(data)\r\n                setCountries(countries)\r\n                setTableData(data)\r\n                setMapCountries(data)\r\n                \r\n            })           \r\n        }\r\n        getCountriesData()\r\n    },[]);\r\n    // console.log(tableData)\r\n\r\n    useEffect(()=>{\r\n             fetch('https://disease.sh/v3/covid-19/all') \r\n            .then((response)=>response.json()) \r\n            .then((data)=>{setCountryInfo(data) })           \r\n    },[]);\r\n\r\n\r\n    //----------------onchange\r\n\r\n    const onCountryChange = async (e)=>{\r\n        const countryCode = e.target.value;\r\n        // console.log(countryCode)\r\n        setCountrytop(countryCode)\r\n\r\n        const url = countryCode === 'worldwide' ? \r\n        'https://disease.sh/v3/covid-19/all' : \r\n        `https://disease.sh/v3/covid-19/countries/${countryCode} `\r\n        \r\n        // making onCountryChange function as --> async\r\n        // go to the url, and once u get the response, turn it into json\r\n        // the time it become json---> it become data\r\n        await fetch(url)  \r\n        .then((response)=> response.json())\r\n        .then((data)=>{\r\n            setCountryInfo(data)\r\n            setCountrytop(countryCode)\r\n            console.log(data)\r\n            setMapCenter([data.countryInfo.lat, data.countryInfo.long])\r\n            setMapZoom(4)\r\n        })\r\n    }\r\n// console.log(tableData)\r\n    return (\r\n        <div className=\"covidapp\">\r\n            <div className=\"app__left\">\r\n                {/* header */}\r\n                {/* title - select input dropdown  */}\r\n                <div className=\"app__header\">\r\n                    <div className=\"app__heading\">\r\n                        <Link to=\"/\"  style={{ textDecoration: 'none', color: '#e74c3c' }}>\r\n                            <h1  style={{ paddingLeft: 13 }}>COVID-19 TRACKER</h1>\r\n                        </Link>\r\n\r\n                    </div>\r\n                    {/* <h1>COVID-19 TRACKER</h1> */}\r\n                    <FormControl className=\"app__dropdown\">\r\n                        {/* assign same value to \"value\" element of \"Select\" and \"MenuItems\" */}\r\n                        <Select \r\n                            variant=\"outlined\" \r\n                            value={countrytop}\r\n                            onChange={onCountryChange}  >\r\n                            <MenuItem value=\"worldwide\">WorldWide</MenuItem>\r\n                            {\r\n                                countries.map((country)=>(\r\n                                    <MenuItem value={country.value} >{country.name}</MenuItem>\r\n                                ))\r\n                            }\r\n                        </Select>\r\n                    </FormControl>\r\n                </div>\r\n\r\n                {/* infoBox */}\r\n                <div className=\"app__stats\">\r\n                    <InfoBox \r\n                        onClick ={(e)=> setCasesType('cases')}\r\n                        active={casesType ==='cases'}\r\n                        casesType={casesType}\r\n                        title=\"Coronavirus Active Cases\"\r\n                        cases={prettyPrintStat(countryInfo.todayCases)}\r\n                        total={prettyPrintStat(countryInfo.active)}\r\n                    />\r\n                    <InfoBox \r\n                        onClick ={(e)=> setCasesType('recovered')}\r\n                        active={casesType ==='recovered'}\r\n                        casesType={casesType}\r\n                        title=\"Recovered\"\r\n                        cases={prettyPrintStat(countryInfo.todayRecovered)}\r\n                        total={prettyPrintStat(countryInfo.recovered)}\r\n                    />\r\n                    <InfoBox \r\n                        onClick ={(e)=> setCasesType('deaths')}\r\n                        active={casesType ==='deaths'}\r\n                        casesType={casesType}\r\n                        title=\"Deaths\"\r\n                        cases={prettyPrintStat(countryInfo.todayDeaths)}\r\n                        total={prettyPrintStat(countryInfo.deaths)}\r\n                    />\r\n\r\n                </div>\r\n                {/* Map */}\r\n                <Map \r\n                    className=\"app__map\"\r\n                    casesType={casesType}\r\n                    countries = {mapCountries}\r\n                    center={mapCenter}\r\n                    zoom={mapZoom}\r\n                />\r\n            \r\n            </div>\r\n            <Card className=\"app__right\" >\r\n                <CardContent>\r\n                    <h3>Live  Cases By Country</h3>\r\n                    {/* table */}\r\n                    <Table countries={tableData}/>\r\n\r\n                    <h3 className=\"app__right_graphTitle\">WorldWide new {casesType}</h3>\r\n                    {/* graph */}\r\n                    <LineGraph casesType={casesType}/>\r\n                </CardContent>\r\n            </Card>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Covid\r\n","import './App.css';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\nimport Home from './Home';\nimport Covid from './Covid';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Router>\n        <Switch>\n          <Route  path=\"/covidpage\"><Covid /></Route>\n          <Route  path=\"/\"><Home /></Route>\n        </Switch>\n      </Router>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}